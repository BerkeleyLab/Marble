# Rummage through KiCad 6.0.x .kicad_pcb file,
# looking for the coordinates of testpoints, and
# emit a Gerber file marking their locations
#
# Note the sign-flip on Y coordinate due to different sign conventions
# inside the pcbnew file vs. its Gerber exporter.

from sys import argv
from test_gbr import gbr_text


def get_coord(ss):
    a = ss.strip().split(" ")
    x = float(a[1])
    y = float(a[2].rstrip(")"))
    return (x, y)


def parse_pcb(f):
    mode = 0  # searching
    rv = []
    coo = ()
    for ll in f.readlines():
        if mode == 0 and "footprint" in ll and "TestPoint_THTPad" in ll:
            mode = 1
        elif mode == 1 and "at" in ll:
            coo = get_coord(ll)
            mode = 2
        elif mode == 2 and "fp_text reference" in ll:
            a = ll.strip().split(" ")
            # print(coo, a[2])
            num = a[2].strip('"').removeprefix("TP")
            rv += [(coo, num)]
            mode = 0
    return rv


# %ADD11C,3.50000*%
def emit_gerber(coord):
    # Header adapted from example shown in Wikipedia page on Gerber format
    print('''G04 Testpoint markers; machine-generated by find_tp.py*
%FSLAX36Y36*%
%MOMM*%
%ADD11C,3.50000*%
%ADD12C,0.70000*%
G01*
G75*
D11*''')
    for coo, name in coord:
        # print(coo, name)
        x, y = coo
        print("X%09dY-%09dD03*" % (x*1000000, y*1000000))
    print("D12*")
    for coo, name in coord:
        x, y = coo
        x0, y0 = x*1000000, -y*1000000
        # Horrid special-casing
        if name in {"6": 1, "7": 1, "8": 1, "14": 1}:
            x0 += 1500000
            y0 += 6500000
        elif name in {"10": 1, "11": 1, "12": 1}:
            x0 -= 7500000
            y0 += 2500000
        else:
            x0 += 1500000
            y0 -= 1000000
        gbr_text(name, 4000000, x0=x0, y0=y0)
    print("M02*")


if __name__ == "__main__":
    iname = argv[1]
    with open(iname) as f:
        coord = parse_pcb(f)
        emit_gerber(coord)
